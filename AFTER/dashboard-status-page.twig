{#
/**
 * Copyright (C) 2022-2023 PT Innovasi Sarana Grafindo
 *
 * digisignPlay - http://digisignplay.com
 *
 * Dev Team ; Rio Saroha Simamora, Yosia Ibnu Loka, Vicky Varianda Excel
 */
#}
{% extends "authed.twig" %}
{% import "inline.twig" as inline %}

{% block pageContent %}
    {% include "theme-dashboard-message.twig" ignore missing %}

            <div class="row row-cols-1 row-cols-md-3 row-cols-xl-3 no-box-shadow">
                <div class="col">
                  <div class="card animation-shake-calm radius-10 border-0 border-3 ">
                     <div class="card-body">
                         <div class="d-flex align-items-center">
                             <div>
                                 <p class="mb-0 text-secondary fs-12 displays-comment" data-title="{% trans "Display" %}" data-title-plural="{% trans "Displays" %}">
                                {% trans "Displays" %}</p>
                                 <h5  class="my-1 text-main-color title displays-count">
                                 </h5>
                             </div>
                             <div class="widgets-icons rounded-circle bg-main-color text-white ms-auto">
                                <i class='bx bx-laptop'></i>
                             </div>
                         </div>
                     </div>
                  </div>
                </div>
                <div class="col">
                 <div class="card animation-shake-calm radius-10 border-0 border-3">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div>
                                <p class="mb-0 text-secondary fs-12">{% trans "Library Size" %}</p>
                                <h5 class="my-1 text-main-color">{{ librarySize }}</h5>
                            </div>
                            <div class="widgets-icons rounded-circle bg-main-color text-white ms-auto"><i class='bx bx-server'></i>
                            </div>
                        </div>
                    </div>
                 </div>
               </div>
               <div class="col">
                 <div class="card animation-shake-calm radius-10 border-0 border-3">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div>
                                <p class="mb-0 text-secondary fs-12">{% if countUsers == 1 %}{% trans "User" %}{% else %}{% trans "Users" %}{% endif %}</p>
                                <h5 class="my-1 text-main-color">{{ countUsers }}</h5>
                            </div>
                            <div class="widgets-icons rounded-circle bg-main-color text-white ms-auto"><i class='bx bx-user' ></i>
                            </div>
                        </div>
                    </div>
                 </div>
               </div>
               <div class="col d-none">
                 <div class="card animation-shake-calm radius-10 border-0 border-3">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div>
                                {% if embeddedWidget != "" %}
                                    {{ embeddedWidget|raw }}
                                {% else %}
                                    <p class="mb-0 text-secondary fs-12">{% trans "Now Showing" %}</p>
                                    <h5 class="my-1 text-main-color">{{ nowShowing }}</h5>
                                {% endif %}
                            </div>
                            <div class="widgets-icons rounded-circle bg-main-color text-white ms-auto"><i class='bx bx-movie'></i>
                            </div>
                        </div>
                    </div>
                 </div>
               </div> 
             </div><!--end row-->
                <div class="row">
                    <div class="col-12 col-lg-7 col-sm-12">
                        <div class="card radius-10">
                            <div class="card-body">
                               <div class="d-flex align-items-center">
                                   <div>    
                                    {% if xmdsLimit != "" %}
                                        <h6 class="mb-0">{% trans %}Bandwidth Usage. Limit {{ xmdsLimit }}{% endtrans %}</h6>
                                    {% else %}
                                        <h6 class="mb-0">{% trans %}Bandwidth Usage ({{ bandwidthSuffix }}){% endtrans %}</h6>
                                    {% endif %}

                                   </div>
                                   <div class="dropdown ms-auto">
                                    {% if currentUser.featureEnabled("displays.reporting") %}
                                        <a class="pull-right" href="/report/form/bandwidth"></a>
                                        <a class="dropdown-toggle dropdown-toggle-nocaret" href="#" data-bs-toggle="dropdown">
                                            <i class='bx bx-dots-horizontal-rounded font-22 text-option'></i>
                                        </a>
                                        <ul class="dropdown-menu">
                                            <li><a class="dropdown-item" href="/report/form/bandwidth">{% trans "More Statistics" %}</a>
                                            </li>
                                        </ul>
                                    {% endif %}
                                   </div>
                               </div>
                                <div class="chart-container1">
									<canvas id="WKWK" style="clear:both;" height="230"></canvas>
								</div>
                            </div>
                         </div>
                    </div>
                    <div class="col-lg-5 col-sm-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="flex align-items-center">
                                    <div>
                                        <h6 class="mb-3">Library Usage</h6>
                                    </div>
                                    <div class="widget-body medium no-padding">
                                        <canvas id="libraryChart" style="clear:both;" width="350" height="335"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                     </div>
                    {# <div class="col-lg-6">
                        <h6 class="mb-0 text-uppercase">Bandwidth Usage (old design)</h6>
						<div class="card">
							<div class="card-body">
                                <div class="chart-container-0">
                                    <canvas id="bandwidthChart" style="clear:both;" height="230"></canvas>
                                </div>
							</div>
						</div>
                    </div> #}
                </div>
         

    <div class="widget d-none" id="displaysGridTable">
        <div class="widget-title">{% trans "Displays" %}
            {% if currentUser.featureEnabled("displays.view") %}
                <a class="pull-right" href="{{ url_for('display.view') }}">{% trans "Displays Page" %}</a>
            {% endif %}
        </div>
        <div class="widget-body">
            <div class="XiboGrid" id="{{ random() }}" data-grid-name="displayGridView">
                <div class="XiboFilter card mb-3 bg-light d-none">
                    <div class="FilterDiv card-body" id="Filter">
                        <form class="form-inline d-block">
                            <div class="tab-content">
                                <div class="tab-pane active" id="filter-general">
                                    {{ inline.hidden("displayGroupId") }}
                                    {{ inline.hidden("mediaInventoryStatus") }}
                                    {{ inline.hidden("loggedIn") }}
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="XiboData card pt-3">
                    <table id="displaysGrid" class="table table-striped" data-state-preference-name="statusDashboardDisplays" style="width: 100%;">
                        <thead>
                        <tr>
                            <th>{% trans "ID" %}</th>
                            <th>{% trans "Display" %}</th>
                            <th>{% trans "Status" %}</th>
                            <th>{% trans "Authorised?" %}</th>
                            <th>{% trans "Current Layout" %}</th>
                            <th>{% trans "Storage Available" %}</th>
                            <th>{% trans "Storage Total" %}</th>
                            <th>{% trans "Storage Free %" %}</th>
                            <th>{% trans "Description" %}</th><th>{% trans "Orientation" %}</th>
                            <th>{% trans "Resolution" %}</th>
                            {% if currentUser.featureEnabled("tag.tagging") %}<th>{% trans "Tags" %}</th>{% endif %}
                            <th>{% trans "Default Layout" %}</th>
                            <th>{% trans "Interleave Default" %}</th>
                            <th>{% trans "Email Alert" %}</th>
                            <th>{% trans "Logged In" %}</th>
                            <th>{% trans "Last Accessed" %}</th>
                            <th>{% trans "Display Profile" %}</th>
                            <th>{% trans "Version" %}</th>
                            <th>{% trans "Device Name" %}</th>
                            <th>{% trans "IP Address" %}</th>
                            <th>{% trans "Mac Address" %}</th>
                            <th>{% trans "Timezone" %}</th>
                            <th>{% trans "Latitude" %}</th>
                            <th>{% trans "Longitude" %}</th>
                            <th>{% trans "Screen shot?" %}</th>
                            <th>{% trans "Thumbnail" %}</th>
                            <th>{% trans "CMS Transfer?" %}</th>
                            <th>{% trans "Bandwidth Limit" %}</th>
                            <th>{% trans "Last Command" %}</th>
                            <th>{% trans "XMR Registered" %}</th>
                            <th>{% trans "Commercial Licence" %}</th>
                            <th>{% trans "Remote" %}</th>
                            <th>{% trans "Created Date" %}</th>
                            <th>{% trans "Modified Date" %}</th>
                            <th>{% trans "Faults?" %}</th>
                        </tr>
                        </thead>
                        <tbody>

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
   
    <div class="row d-none">
        <div class="col-lg-6">
            <div class="widget">
                <div class="widget-title">
                    <i class="fa fa-desktop"></i>
                    {% trans "Display Activity" %}
                    <div class="clearfix"></div>
                </div>
                <div class="widget-body medium no-padding">
                    <div class="table-responsive">
                        <table id="displays" class="table">
                            <thead>
                            <tr>
                                <th>{% trans "Display" %}</th>
                                <th>{% trans "Logged In" %}</th>
                                <th>{% trans "Authorised" %}</th>
                            </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


{% endblock %}

{% block javaScript %}
    <script type="text/javascript">


        //my code
        $(function () {
            "use strict";
            // chart 1
            var ctx = document.getElementById('WKWK').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {{ bandwidthWidget|raw }},
                options: {
                    maintainAspectRatio: false,
                    legend: {
                        display: true,
                        labels: {
                            fontColor: '#585757',
                            boxWidth: 40
                        }
                    },
                    tooltips: {
                        enabled: true
                    },
                    scales: {
                        xAxes: [{
                            ticks: {
                                beginAtZero: true,
                                fontColor: '#585757'
                            },
                            gridLines: {
                                display: true,
                                color: "rgba(0, 0, 0, 0.07)"
                            },
                            stacked: {% if xmdsLimit %}true{% else %}false{% endif %},
                        }],
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                fontColor: '#585757'
                            },
                            gridLines: {
                                display: true,
                                color: "rgba(0, 0, 0, 0.07)"
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "{{ bandwidthSuffix }}",
                            },
                            stacked: {% if xmdsLimit %}true{% else %}false{% endif %},
                        }]
                    }
                }
            });
            
        });
        //end my code

        var displayGroupStatusChart = null;
        var displayGroupContentStatusChart = null;

        var displayGroupId = null;
        var loggedInStatus = null;
        var mediaInventoryStatus = null;

        var displayGroupIdsContent = [];
        var displayGroupIdsStatus = [];
        var displayGridTable = null

        // Create our chart
        var bandwidthChart = new Chart($("#bandwidthChart"), {
            type: "bar",
            data: {{ bandwidthWidget|raw }},
            options: {
                scales: {
                    xAxes: [{
                        stacked: {% if xmdsLimit %}true{% else %}false{% endif %}
                    }],
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: "{{ bandwidthSuffix }}",
                        },
                        stacked: {% if xmdsLimit %}true{% else %}false{% endif %}
                    }]
                },
                legend: {
                    display: false
                },
                maintainAspectRatio: false,
            }
        });

        var libraryData = {{ libraryWidgetData|raw }};
        var colours = new Array();
        for(var i = 0; i < libraryData.length; i++) {
            colours.push($c.rand());
        }
        var libraryChart = new Chart($("#libraryChart"), {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: libraryData,
                   backgroundColor: ["#0d6efd", , "#0d6efd", "#ffc107", "#212529", "#556EE6", "#2745DB", "#DB6F1D"],
                }],
                labels: {{ libraryWidgetLabels|raw }}
            },
            options: {
                animation: {
					animateScale: true,
					animateRotate: true
                },
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    display: true,
                    position: 'bottom',
                    margin: 20,
                    labels: {
                        boxWidth: 20,
                        padding: 12
                    },
                },
            }
        });

        $(".article_date").each(function(index, element) {
            if($(".article_date").length > 1){
                // Replace the ISO date with a nice formatted date "for humans"
                $(this).html(moment($(this).html(), systemDateFormat).fromNow());
            }
        });

        var table = $("#displays").DataTable({
            "language": dataTablesLanguage,
            serverSide: true,
            stateSave: true,
            responsive: true,
            stateDuration: 0,
            stateLoadCallback: dataTableStateLoadCallback,
            stateSaveCallback: dataTableStateSaveCallback,
            filter: false,
            searchDelay: 3000,
            order: [[0, "asc"]],
            ajax: {
                "url": "{{ url_for("statusdashboard.displays") }}",
                "data": function (dataToSend) {
                    //make a new object so as not to destroy the input.
                    var data = {};
                    data.draw = dataToSend.draw;
                    data.length = dataToSend.length;
                    data.start = dataToSend.start;
                    data.order = dataToSend.order;
                    data.columns = [];

                    $.each(dataToSend.columns, function (index, e) {
                        var col = {};
                        col.data = e.data;
                        if (e.name != null && e.name !== "")
                            col.name = e.name;
                        data.columns.push(col);
                    });

                    $.extend(data, $("#displays").closest(".XiboGrid").find(".FilterDiv form").serializeObject());

                    return data;
                }
            },
            createdRow: function (row, data, index) {
                if (data.mediaInventoryStatus === 1) {
                    $(row).addClass('table-success');
                } else if (data.mediaInventoryStatus === 1) {
                    $(row).addClass('table-danger');
                } else {
                    $(row).addClass('table-warning');
                }
            },
            lengthChange: false,
            "columns": [
                {"data": "display"},
                {"data": "loggedIn", "render": dataTableTickCrossColumn},
                {"data": "licensed", "render": dataTableTickCrossColumn}
            ]
        });

        table.on('processing.dt', dataTableProcessing);
        table.on('draw', function(e, settings) {
            var $displaysComment = $(".displays-comment");
            var total = table.page.info().recordsTotal;
            $(".displays-count").html(total);
            $displaysComment.html((total > 0) ? $displaysComment.data().titlePlural : $displaysComment.data().title)
        });

        var displayData {% if displayStatus|raw %}= {{ displayStatus|raw }}{% endif %};
        var displayStatusChart = new Chart($("#displayStatusChart"), {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: displayData,
                    backgroundColor: ["rgb(0,255,0)", "rgb(255,0,0)"]
                }],
                labels: [translations.online, translations.offline]
            },
            options: {
                maintainAspectRatio: false
            }
        });

        var displayMediaStatusData {% if displayMediaStatus|raw %}= {{ displayMediaStatus|raw }}{% endif %};

        var displayContentChart = new Chart($("#displayContentChart"), {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: displayMediaStatusData,
                    backgroundColor: ["rgb(0,255,0)", "rgb(255,0,0)"]
                }],
                labels: [translations.upToDate, translations.notUpToDate]
            },
            options: {
                maintainAspectRatio: false
            }
        });

        $("#displayStatusChart").click(function(evt){
                var activePoints = displayStatusChart.getElementsAtEvent(evt);

                if (activePoints[0]) {
                    var chartData = activePoints[0]['_chart'].config.data;
                    var index = activePoints[0]['_index'];

                    var label = chartData.labels[index];

                    if (label == translations.online) {
                        loggedInStatus = 1;
                        $('#dGStatusTitle').css('color', 'rgb(0,255,0)')
                    } else {
                        loggedInStatus = 0;
                        $('#dGStatusTitle').css('color', 'rgb(255,0,0)')
                    }

                    if (displayGroupStatusChart !== undefined && displayGroupStatusChart !== null) {
                        displayGroupStatusChart.destroy();
                    }

                    $.ajax({
                        type: "get",
                        url: "{{ url_for("statusdashboard.displayGroups") }}",
                        data: {
                            status: label
                        },
                        success: function (result) {
                            if (result.success === true) {

                                var displayGroupNames = JSON.parse(result.data.displayGroupNames);
                                var displaysAssigned = JSON.parse(result.data.displayGroupMembers);
                                displayGroupIdsStatus = JSON.parse(result.data.displayGroupIds);

                                var coloursDG = [];

                                for(var i = 0; i < displayGroupNames.length; i++) {
                                    coloursDG.push($c.rand());
                                }

                                displayGroupStatusChart = new Chart($("#displayGroupStatusChart"), {
                                    type: 'doughnut',
                                    data: {
                                        datasets: [{
                                            data: displaysAssigned,
                                            backgroundColor: coloursDG
                                        }],
                                        labels: displayGroupNames
                                    },
                                    options: {
                                        maintainAspectRatio: false,
                                    }
                                });

                                $("#displayGroupStatusChartRow").removeClass('d-none');
                            }
                        }
                    });
                }
            }
        );

        $("#displayContentChart").click(function(evt){
                var activePoints = displayContentChart.getElementsAtEvent(evt);

                if (activePoints[0]) {
                    var chartData = activePoints[0]['_chart'].config.data;
                    var index = activePoints[0]['_index'];

                    var label = chartData.labels[index];

                    if (label == translations.upToDate) {
                        mediaInventoryStatus = 1;
                        $('#dGContentTitle').css('color', 'rgb(0,255,0)')
                    } else {
                        mediaInventoryStatus = -1;
                        $('#dGContentTitle').css('color', 'rgb(255,0,0)')
                    }

                    if (displayGroupContentStatusChart !== undefined && displayGroupContentStatusChart !== null) {
                        displayGroupContentStatusChart.destroy();
                    }

                    $.ajax({
                        type: "get",
                        url: "{{ url_for("statusdashboard.displayGroups") }}",
                        data: {
                            inventoryStatus: label
                        },
                        success: function (result) {
                            if (result.success === true) {

                                var displayGroupNames = JSON.parse(result.data.displayGroupNames);
                                var displaysAssigned = JSON.parse(result.data.displayGroupMembers);
                                displayGroupIdsContent = JSON.parse(result.data.displayGroupIds);

                                var coloursDG = [];

                                for(var i = 0; i < displayGroupNames.length; i++) {
                                    coloursDG.push($c.rand());
                                }

                                displayGroupContentStatusChart = new Chart($("#displayGroupContentStatusChart"), {
                                    type: 'doughnut',
                                    data: {
                                        datasets: [{
                                            data: displaysAssigned,
                                            backgroundColor: coloursDG
                                        }],
                                        labels: displayGroupNames
                                    },
                                    options: {
                                        maintainAspectRatio: false
                                    }
                                });

                                $("#displayGroupStatusChartRow").removeClass('d-none');
                            }
                        }
                    });
                }
            }
        );

        $("#displayGroupStatusChart").click(function(evt) {
                var activePoints = displayGroupStatusChart.getElementsAtEvent(evt);

                $('#displayGroupId').val("");
                $('#mediaInventoryStatus').val("");
                $('#loggedIn').val("");
                if (activePoints[0]) {
                    var chartData = activePoints[0]['_chart'].config.data;
                    var index = activePoints[0]['_index'];

                    displayGroupId = displayGroupIdsStatus[index];

                    $('#displayGroupId').val(displayGroupId);
                    $('#loggedIn').val(loggedInStatus);
                    handleDisplaysGrid();

                    $("#displaysGridTable").removeClass('d-none');
                }
            }
        );

        $("#displayGroupContentStatusChart").click(function(evt){
                var activePoints = displayGroupContentStatusChart.getElementsAtEvent(evt);

                if (activePoints[0]) {
                    $('#displayGroupId').val("");
                    $('#mediaInventoryStatus').val("");
                    $('#loggedIn').val("");

                    var chartData = activePoints[0]['_chart'].config.data;
                    var index = activePoints[0]['_index'];

                    displayGroupId = displayGroupIdsContent[index];

                    $('#displayGroupId').val(displayGroupId);
                    $('#mediaInventoryStatus').val(mediaInventoryStatus);
                    handleDisplaysGrid();

                    $("#displaysGridTable").removeClass('d-none');
                }
            }
        );

        function handleDisplaysGrid() {
            if (displayGridTable != null) {
                displayGridTable.ajax.reload();
            } else {
                displayGridTable = $("#displaysGrid").DataTable({
                    "language": dataTablesLanguage,
                    dom: dataTablesTemplate,
                    serverSide: true,
                    stateSave: true,
                    stateDuration: 0,
                    stateLoadCallback: dataTableStateLoadCallback,
                    stateSaveCallback: dataTableStateSaveCallback,
                    filter: false,
                    searchDelay: 3000,
                    responsive: true,
                    order: [[1, "asc"]],
                    ajax: {
                        "url": "{{ url_for("display.search") }}",
                        "data": function (dataToSend) {
                            //make a new object so as not to destroy the input.
                            var data = {};
                            data.draw = dataToSend.draw;
                            data.length = dataToSend.length;
                            data.start = dataToSend.start;
                            data.order = dataToSend.order;
                            data.columns = [];
                            // remove buttons column
                            dataToSend.columns.pop();
                            $.each(dataToSend.columns, function (index, e) {
                                var col = {};
                                col.data = e.data;
                                if (e.name != null && e.name != "")
                                    col.name = e.name;
                                data.columns.push(col);
                            });

                            $.extend(data, $("#displaysGrid").closest(".XiboGrid").find(".FilterDiv form").serializeObject());
                            return data;
                        }
                    },
                    createdRow: function (row, data, index) {
                        if (data.mediaInventoryStatus === 1) {
                            $(row).addClass('table-success');
                        } else if (data.mediaInventoryStatus === 1) {
                            $(row).addClass('table-danger');
                        } else {
                            $(row).addClass('table-warning');
                        }
                    },
                    "columns": [
                        {"data": "displayId", responsivePriority: 2},
                        {"data": "display", responsivePriority: 2},
                        {
                            "data": "mediaInventoryStatus",
                            responsivePriority: 2,
                            "render": function (data, type, row) {
                                if (type != "display")
                                    return data;

                                var icon = "";
                                if (data == 1)
                                    icon = "fa-check";
                                else if (data == 2)
                                    icon = "fa-times";
                                else
                                    icon = "fa-cloud-download";

                                return '<span class="fa ' + icon + '" title="' + (row.statusDescription) + '"></span>';
                            }
                        },
                        {"data": "licensed", "render": dataTableTickCrossColumn, responsivePriority: 3},
                        {"data": "currentLayout", "visible": false, "sortable": false, responsivePriority: 5},
                        {
                            "data": "storageAvailableSpace",
                            responsivePriority: 5,
                            "visible": false,
                            "render": function (data, type, row) {
                                if (type != "display")
                                    return data;

                                return row.storageAvailableSpaceFormatted;
                            }
                        },
                        {
                            "data": "storageTotalSpace",
                            responsivePriority: 5,
                            "visible": false,
                            "render": function (data, type, row) {
                                if (type != "display")
                                    return data;

                                return row.storageTotalSpaceFormatted;
                            }
                        },
                        {"data": "storagePercentage", "visible": false, "sortable": false, responsivePriority: 5},
                        {"data": "description", "visible": false, responsivePriority: 4},
                        {"data": "orientation", "visible": false, responsivePriority: 6},
                        {"data": "resolution", "visible": false, responsivePriority: 6},
                        {% if currentUser.featureEnabled("tag.tagging") %}
                        {
                            "name": "tags",
                            responsivePriority: 3,
                            "sortable": false,
                            "visible": false,
                            "data": dataTableCreateTags
                        },
                        {% endif %}
                        {"data": "defaultLayout", "visible": false, responsivePriority: 4},
                        {"data": "incSchedule", "render": dataTableTickCrossColumn, "visible": false, responsivePriority: 5},
                        {"data": "emailAlert", "render": dataTableTickCrossColumn, "visible": false, responsivePriority: 5},
                        {"data": "loggedIn", "render": dataTableTickCrossColumn, responsivePriority: 3},
                        {"data": "lastAccessed", "render": dataTableDateFromUnix, responsivePriority: 4},
                        {
                            "name": "displayProfileId",
                            responsivePriority: 5,
                            "data": function (data, type) {
                                return data.displayProfile;
                            },
                            "visible": false
                        },
                        {
                            "name": "clientSort",
                            responsivePriority: 4,
                            "data": function (data) {
                                if (data.clientType === 'lg') {
                                    data.clientType = 'webOS'
                                }

                                return data.clientType + ' ' + data.clientVersion + '-' + data.clientCode;
                            },
                            "visible": false
                        },
                        {"data": "deviceName", "visible": false, responsivePriority: 5},
                        {"data": "clientAddress", "visible": false, responsivePriority: 6},
                        {"data": "macAddress", responsivePriority: 5},
                        {"data": "timeZone", "visible": false, responsivePriority: 5},
                        {"data": "latitude", "visible": false, responsivePriority: 6},
                        {"data": "longitude", "visible": false, responsivePriority: 6},
                        {"data": "screenShotRequested", "render": dataTableTickCrossColumn, "visible": false, "name": "screenShotRequested", responsivePriority: 7},
                        {
                            "name": "thumbnail",
                            responsivePriority: 4,
                            "orderable": false,
                            "data": function (data, type) {
                                if (type != "display")
                                    return data.thumbnail;

                                if (data.thumbnail != "") {
                                    return '<a class="display-screenshot-container" data-toggle="lightbox" data-type="image" href="' + data.thumbnail + '"><img class="display-screenshot" src="' + data.thumbnail + '" data-display-id="'+ data.displayId +'" data-type="'+ data.clientType +'" /></a>';
                                }
                                else {
                                    return "";
                                }
                            },
                            "visible": false
                        },
                        {
                            "data": "isCmsTransferInProgress",
                            "render": dataTableTickCrossColumn,
                            "visible": false,
                            "name": "isCmsTransferInProgress"
                        },
                        {
                            "name": "bandwidthLimit",
                            responsivePriority: 5,
                            "data": null,
                            "render": {"_": "bandwidthLimit", "display": "bandwidthLimitFormatted", "sort": "bandwidthLimit"},
                            "visible": false
                        },
                        {
                            "data": "lastCommandSuccess",
                            responsivePriority: 6,
                            "render": function (data, type, row) {
                                if (type != "display")
                                    return data;

                                var icon = "";
                                if (data == 1)
                                    icon = "fa-check";
                                else if (data == 0)
                                    icon = "fa-times";
                                else
                                    icon = "fa-question";

                                return "<span class='fa " + icon + "'></span>";
                            },
                            "visible": false
                        },
                        {
                            "data": "xmrChannel",
                            responsivePriority: 6,
                            "render": function (data, type, row) {
                                if (type === "export") {
                                    return (data !== null && data !== "") ? 1 : 0;
                                }

                                if (type != "display")
                                    return data;

                                var icon = "";
                                if (data != null && data != "")
                                    icon = "fa-check";
                                else
                                    icon = "fa-times";

                                return "<span class='fa " + icon + "'></span>";
                            },
                            "visible": false
                        },
                        {
                            "data": "commercialLicence",
                            "name": "commercialLicence",
                            responsivePriority: 5,
                            "render": function (data, type, row) {
                                if (type != "display")
                                    return data;

                                var icon = "";
                                if (data == 3) {
                                    return "N/A";
                                } else {
                                    if (data == 1) {
                                        icon = "fa-check";
                                    } else if (data == 0) {
                                        icon = "fa-times";
                                    } else if (data == 2) {
                                        icon = "fa-clock-o";
                                    }

                                    return '<span class="fa ' + icon + '" title="' + (row.commercialLicenceDescription) + '"></span>';
                                }
                            },
                            "visible": false
                        },
                        {
                            "name": "remote",
                            "data": null,
                            responsivePriority: 4,
                            "render": function (data, type, row) {
                                if (type === "display") {
                                    var html = "<div class='remote-icons'>";
                                    if ("{{ settings.SHOW_DISPLAY_AS_VNCLINK }}" !== "" && row.clientAddress != null && row.clientAddress !== "") {
                                        var link = "{{ settings.SHOW_DISPLAY_AS_VNCLINK }}".replace('%s', row.clientAddress);
                                        html += '<a href="' + link + '" title="{{ "VNC to this Display"|trans }}" target="{{ settings.SHOW_DISPLAY_AS_VNC_TGT }}">'
                                            + '<i class="fa fa-eye"></i></a>';
                                    }

                                    if (row.teamViewerLink !== "") {
                                        html += '<a href="' + row.teamViewerLink + '" title="{{ "TeamViewer to this Display"|trans }}" target="_blank">'
                                            + '<img src="{{ theme.rootUri() }}theme/default/img/remote_icons/teamviewer.png" alt="TeamViewer Icon"></a>';
                                    }

                                    if (row.webkeyLink !== "") {
                                        html += '<a href="' + row.webkeyLink + '" title="{{ "Webkey to this Display"|trans }}" target="_blank">'
                                            + '<img src="{{ theme.rootUri() }}theme/default/img/remote_icons/webkey.png" alt="Webkey Icon"></a>';
                                    }

                                    return html + "</div>";

                                } else if (type === "export") {
                                    if (row.teamViewerLink !== "") {
                                        return "TeamViewer: " + row.teamViewerLink;
                                    }
                                    if (row.webkeyLink !== "") {
                                        return "Webkey: " + row.webkeyLink;
                                    }
                                    if (row.teamViewerLink === "" && row.webkeyLink === "") {
                                        return "";
                                    }
                                } else {
                                    return "";
                                }
                            },
                            "visible": true,
                            "orderable": false
                        },
                        {"data": "createdDt", "visible": false, responsivePriority: 6},
                        {"data": "modifiedDt", "visible": false, responsivePriority: 6},
                        {
                            "data": "countFaults",
                            "name": "countFaults",
                            responsivePriority: 3,
                            "render": function (data, type, row) {
                                if (type != "display") {
                                    return data;
                                }

                                if (data > 0) {
                                    return '<span class="badge" style="background-color: red; color: white">'+(row.countFaults)+'</span>';
                                } else {
                                    return '';
                                }
                            }
                        },
                    ]
                });

                displayGridTable.on('draw', dataTableDraw);
                displayGridTable.on('draw', { form: $("#displaysGrid").closest(".XiboGrid").find(".FilterDiv form") }, dataTableCreateTagEvents);
                displayGridTable.on('processing.dt', dataTableProcessing);
                dataTableAddButtons(displayGridTable, $('#displaysGrid_wrapper').find('.dataTables_buttons'))}
        }
    </script>

      {#
        //pop-up abangkuu
    #}
    <style>
        .popup{
            background-color: #f5f4f2;
            width: 420px;
            padding: 30px 40px;
            position: absolute;
            transform: translate(-50%,-50%);
            left: 50%;
            top: 50%;
            border-radius: 8px;
            font-family: "Poppins",sans-serif;
            display: none; 
            text-align: center;
        }
        .popup button{
            display: block;
            margin:  0 0 20px auto;
            background-color: transparent;
            font-size: 30px;
            color: #ffffff;
            background: #03549a;
            border-radius: 100%;
            width: 40px;
            height: 40px;
            border: none;
            outline: none;
            cursor: pointer;
        }
        .popup h2{
        margin-top: -20px;
        }
        .popup p{
            font-size: 14px;
            text-align: justify;
            margin: 20px 0;
            line-height: 25px;
        }

        .ui-widget-overlay {
            opacity: 50;
            filter: Alpha(Opacity=50);
            background-color: rgb(50, 50, 50);
        }
    </style>

<body>
    <div class="popup">
        <button id="close">&times;</button>
        
        <p>
            <img src="https://rawcdn.githack.com/linuxenic/digisignPlay_ASSETS/8d831e7e2a32ac8dd9a4ba8edfb40d75c4979777/certidigisign.jpg" height="180px" width="350px">
        </p>
        <p><b>PT Innovasi Sarana Grafindo</b> has opened offline training sessions for digisignPlay certification. you can visit the link below for more information.</p>
        <a href="https://digisignplay.com/certification" target="_blank">Go!</a>
    </div>
    <!--Script-->
    <script type="text/javascript">

    window.addEventListener("load", function(){
    setTimeout(
        function open(event){
            document.querySelector(".popup").style.display = "block";
            $(".ui-widget-overlay").css({
                background: "rgb(0, 0, 0)",
                opacity: "50",
                filter: "Alpha(Opacity=50)",
            })
        },
         2000 
     )
    });


    document.querySelector("#close").addEventListener("click", function(){
        document.querySelector(".popup").style.display = "none";
    });
    </script>
{% endblock %}
